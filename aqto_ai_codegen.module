<?php

/**
 * @file
 * Primary module hooks for Aqto AI Codegen module.
 */

/**
 * Implements hook_aqto_ai_actions_available().

 * @return array
 */
function aqto_ai_codegen_aqto_ai_actions_available(): array
{
    return [
        'create_a_module' => [
            [
                'description' => 'Create a new module with a .info.yml and .module file.',
                'service_name' => 'aqto_ai_codegen.generator',
                'method' => 'generateModuleScaffold',
                'args' => [
                    'module_name' => 'The module name',
                ],
            ],
        ],
        'create_a_plugin_block_and_theme_and_template_aka_component' => [
            [
                'description' => 'Create a new plugin block, theme, and template, known as a component',
                'service_name' => 'aqto_ai_codegen.generator',
                'method' => 'generatePluginBlockAndThemeAndTemplate',
                'args' => [
                    'module' => 'The module name',
                    'block_name' => 'The block name',
                    'variables' => 'The block primitives to use in the block render array. The key is the label, which should be lowercase and no spaces, use underscore for spaces. Possible values should be valid #type Drupal form field types e.g. textfield, textarea, image, etc.',
                    'theme_name' => 'The theme hook entry name prefixed with module name, e.g. my_module_hero_photo',
                    'appearance_details' => 'A description of the appearance and any needed JS libraries functionality of the component, such as including AlpineJS, animeJS, GSAP, etc..'
                ],
                'extra_context' => 'This function will generate a new module if it does not exist, a new theme function, a new plugin block, and a new twig template. The block will use the theme function to render the block, and the twig template will use the block render array to render the block.',

            ],
        ],
        'create_paragraph_block_content_type' => [
            [
                'description' => 'Create a new paragraph block content type',
                'service_name' => 'aqto_ai_codegen.generator',
                'method' => 'generateParagraphBlockContentType',
                'args' => [
                    'module' => 'The module name',
                    'name' => 'The content type name',
                    'template' => 'The template file name',
                    'fields' => 'The fields and nested paragraphs in JSON format',
                    'appearance' => 'The appearance and functionality specs',
                ],
                'extra_context' => 'This function will generate Drupal field configuration without a UUID that will be used in a Feature module, including standard Drupal core field types and Drupal Paragraph types and a Paragraph bundle YML field configurations, and a new twig template. The paragraph bundle will use the paragraph type to render the bundle, and the twig template will use the paragraph render array to render the bundle. Data should come back with array of the necessary configuration values nested in the "fields" data that can be converted to yml.',
            ],
        ],
        'enhance_feature' => [
            [
                'description' => 'Build a prompt that will indicate to the llm that they have base64 encoded config, and they want to return a json response with details about a design spec. Specifically, provide a "module_hooks" array of any hook_preprocess_HOOK functions that can be written directly into the the .module of the project, a "theme_hooks" that we\'ll add or ammend in the .module\'s hook_theme(), should include the "variables" key and the "template-name" key so we can write that data and create the template file.',
                'service_name' => 'aqto_ai_codegen.feature_enhancer',
                'method' => 'enhanceFeature',
                'args' => [
                    'module_name' => 'The module name',
                    'module_requests' => 'An array of preprocess requests in natural language, such as "We want to display our image field in a nice styled round border with a hover effect". These rqeuests will be sent to the LLM to consider in scaffolding any hook_preprocess_HOOK functions.',
                    'template_design_requests' => 'An array of template design requests. These will be sent to the LLM to consider in scaffolding any hook_theme() implementations and twig template files.',
                ],
                'extra_context' => 'This function will take a module name and requests, and ultimately through other actions check out updates and write to disk.',
            ]
        ],
        'get_design_spec_from_module_config_and_requests' => [
            [
                'description' => 'Build a prompt that will indicate to the llm that they have base64 encoded config, and they want to return a json response with details about a design spec. Specifically, provide a "module_hooks" array of any hook_preprocess_HOOK functions that can be written directly into the the .module of the project, a "theme_hooks" that we\'ll add or ammend in the .module\'s hook_theme(), should include the "variables" key and the "template-name" key so we can write that data and create the template file.',
                'service_name' => 'aqto_ai_codegen.generator',
                'method' => 'getDesignSpecFromModuleConfig',
                'args' => [
                    'config_files' => 'The base64 encoded config files to consider when constructing preprocess functions and theme hooks',
                    'module_file' => 'The base64 encoded module file to consider when constructing preprocess functions and theme hooks',
                    'module_path' => 'The module path',
                    'module_name' => 'The module name',
                    'module_requests' => 'An array of preprocess requests in natural language, such as "We want to display our image field in a nice styled round border with a hover effect". These rqeuests will be sent to the LLM to consider in scaffolding any hook_preprocess_HOOK functions.',
                    'theme_requests' => 'An array of template design requests. These will be sent to the LLM to consider in scaffolding any hook_theme() implementations and twig template files.',
                ],
                'extra_context' => 'This function will take a module path and base64 encoded config files and return a JSON response with details about a design spec. The design spec should have key of "file_changes" and we can loop through and process each change by writing the "new_contents" value to the "file_path" value which we should have in the payload as base64 encoded new file contents with updates provided. The design spec should also have a "module_hooks" array of any hook_preprocess_HOOK functions that can be written directly into the the .module of the project, a "theme_hooks" that we\'ll add or ammend in the .module\'s hook_theme(), should include the "variables" key and the "template-name" key so we can write that data and create the template file.',
            ]
        ]
    ];
}
